[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\taita\AppData\Local\Temp\idea28185.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\taita\AppData\Local\Temp\idea28185.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.6 (Oracle Corporation Java 21.0.1)
[debug] Load.defaultLoad until apply took 217.8955ms
[debug]           Load.loadUnit: plugins took 158.2155ms
[debug]           Load.loadUnit: defsScala took 0.6889ms
[debug] [Loading] Scanning directory C:\Users\taita\IdeaProjects\CS441-hw3-nta3\project
[debug]             Load.loadUnit: mkEval took 8.707ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\taita\IdeaProjects\CS441-hw3-nta3\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 36.9451 ms
[info] loading settings for project cs441-hw3-nta3-build from plugins.sbt, scalapb.sbt, idea28185.sbt...
[debug]               Load.resolveProject(cs441-hw3-nta3-build) took 118.7071ms
[debug]             Load.loadTransitive: finalizeProject(Project(id cs441-hw3-nta3-build, base: C:\Users\taita\IdeaProjects\CS441-hw3-nta3\project, plugins: List(<none>))) took 175.7409ms
[debug] [Loading] Done in C:\Users\taita\IdeaProjects\CS441-hw3-nta3\project, returning: (cs441-hw3-nta3-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 5308.6021ms
[debug]           Load.loadUnit: cleanEvalClasses took 45.0122ms
[debug]         Load.loadUnit(file:/C:/Users/taita/IdeaProjects/CS441-hw3-nta3/project/, ...) took 5548.2834ms
[debug]       Load.apply: load took 5887.8102ms
[debug]       Load.apply: resolveProjects took 11.1836ms
[debug]       Load.apply: finalTransforms took 127.9546ms
[debug]       Load.apply: config.delegates took 14.6513ms
[debug]       Load.apply: Def.make(settings)... took 835.109ms
[debug]       Load.apply: structureIndex took 216.4762ms
[debug]       Load.apply: mkStreams took 4.6869ms
[info] loading project definition from C:\Users\taita\IdeaProjects\CS441-hw3-nta3\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 15965.7916ms
[debug]     Load.loadUnit: defsScala took 0.0047ms
[debug] [Loading] Scanning directory C:\Users\taita\IdeaProjects\CS441-hw3-nta3
[debug]       Load.loadUnit: mkEval took 0.5489ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtassembly.AssemblyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(spray.revolver.RevolverPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtprotoc.ProtocPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtassembly.AssemblyPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(spray.revolver.RevolverPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtprotoc.ProtocPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,org.portablescala.sbtplatformdeps.PlatformDepsPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtassembly.AssemblyPlugin,sbtprotoc.ProtocPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,spray.revolver.RevolverPlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 7.0121 ms
[info] loading settings for project root from build.sbt...
[debug]         Load.resolveProject(root) took 120.3053ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\taita\IdeaProjects\CS441-hw3-nta3, plugins: List(<none>))) took 130.7571ms
[debug] [Loading] Done in C:\Users\taita\IdeaProjects\CS441-hw3-nta3, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 4091.69ms
[debug]     Load.loadUnit: cleanEvalClasses took 53.5699ms
[debug]   Load.loadUnit(file:/C:/Users/taita/IdeaProjects/CS441-hw3-nta3/, ...) took 20119.2488ms
[debug] Load.apply: load took 20161.6992ms
[debug] Load.apply: resolveProjects took 0.3652ms
[debug] Load.apply: finalTransforms took 62.0135ms
[debug] Load.apply: config.delegates took 1.0305ms
[debug] Load.apply: Def.make(settings)... took 181.1992ms
[debug] Load.apply: structureIndex took 70.0471ms
[debug] Load.apply: mkStreams took 0.0067ms
[info] set current project to CS441-hw3-nta3 (in build file:/C:/Users/taita/IdeaProjects/CS441-hw3-nta3/)
[warn] there's a key that's not used by any other settings/tasks:
[warn]  
[warn] * root / assemblyMergeStrategy
[warn]   +- C:\Users\taita\IdeaProjects\CS441-hw3-nta3\build.sbt:42
[warn]  
[warn] note: a setting might still be used by a command; to exclude a key from this `lintUnused` check
[warn] either append it to `Global / excludeLintKeys` or call .withRank(KeyRanks.Invisible) on the key
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51914 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51914, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to CS441-hw3-nta3 (in build file:/C:/Users/taita/IdeaProjects/CS441-hw3-nta3/)
[debug] > Exec(idea-shell, None, None)
